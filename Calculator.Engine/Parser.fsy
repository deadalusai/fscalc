%{
open Calculator.Engine
%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Int64> INT64
%token <System.Double> FLOAT
%token <System.String> NAME
%token PLUS MINUS ASTER	SLASH EXPONENT SQRT MOD SIN COS TAN
%token LET EQUAL DEL
%token LPAREN RPAREN
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type <CalcCommand> start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.

start:
	| Expr EOF                 { Equation($1)          }
	| LET Name EQUAL Expr EOF  { VarAssignment($2, $4) }
	| DEL Name                 { VarDeletion($2)       }
							   
Expr:
	| Expr PLUS  Term		   { Plus($1, $3)  }
	| Expr MINUS Term		   { Minus($1, $3) }
	| Term					   { Term($1)      }
							   
Term:                          
	| Term ASTER Factor		   { Times($1, $3)  }
	| Term SLASH Factor        { Divide($1, $3) }
	| Term MOD Factor          { Mod($1, $3)    }
	| Factor				   { Factor($1)     }
							   
Factor:                        
	| FLOAT					   { Float($1)        }
	| INT64					   { Integer($1)      }
	| Name                     { Variable($1)     }
	| MINUS Factor             { Negative($2)     }
	| LPAREN Expr RPAREN	   { GroupExpr($2)    }
	| Factor EXPONENT Factor   { Exponent($1, $3) }
	| SQRT Factor              { Sqrt($2)         }
    | SIN Factor               { Sin($2)          }
    | COS Factor               { Cos($2)          }
    | TAN Factor               { Tan($2)          }

Name:
	| NAME                     { Name($1) }